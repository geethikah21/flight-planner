{"version":3,"sources":["components/FlightSearchFormTwo/index.js","components/FlightTableTwo/index.js","pages/FlightPlannerHome/index.js","App.js","reportWebVitals.js","index.js"],"names":["FlightSearchFormTwo","props","handleChange","bind","handleSubmit","getRoutes","state","fly_from_city","fly_from_state","fly_from_country","fly_to_city","fly_to_state","fly_to_country","currency","early","late","form_alert","error_alert","a","reqOptions","method","headers","process","fetch","URLSearchParams","query","this","response","status","setState","json","from_places","to_places","origin","destination","outbound_date","inbound_date","dataCallback","event","preventDefault","placeIds","getPlaces","self","then","to_id","Places","PlaceId","from_id","target","name","value","states","Map","set","className","Alert","variant","onClose","dismissible","Heading","Form","Group","Row","Label","Col","Control","type","placeholder","onChange","as","Array","from","keys","map","get","currencies","Code","Symbol","Button","onClick","Component","FlightTableTwo","rows","carriers","places","ready","i","data","Carriers","length","CarrierId","Name","j","Quotes","quote","index","directString","Direct","parsedOutboundDate","OutboundLeg","DepartureDate","split","parsedInboundDate","InboundLeg","push","MinPrice","CarrierIds","OriginId","DestinationId","Routes","route","Price","Currencies","style","display","height","flexGrow","background","autoHeight","columns","field","headerName","width","pageSize","FlightPlannerHome","useState","setCurrencies","gotCurrencies","setGotCurrencies","tableData","setTableData","setReady","getCurrencies","App","Container","fluid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74697285.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport { Col } from 'react-bootstrap'\nimport Button from 'react-bootstrap/Button'\nimport './index.css'\nimport { Alert } from \"react-bootstrap\"\n\nclass FlightSearchFormTwo extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.getRoutes = this.getRoutes.bind(this);\n\n        this.state = {\n            fly_from_city: \"\",\n            fly_from_state: \"\",\n            fly_from_country: \"\",\n            fly_to_city: \"\",\n            fly_to_state: \"\", \n            fly_to_country: \"\",  \n            currency: \"\",\n            early: \"\", \n            late: \"\",\n            form_alert: false,\n            error_alert: false,\n        };\n\n    }\n\n    async getPlaces(currency) {\n        const reqOptions = {\n            method: 'GET',\n            headers: {\n                \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\n                \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n                \"useQueryString\": true\n            }\n        }\n        let response = await fetch(`https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/${currency}/en-US/?` + new URLSearchParams({query: this.state.fly_from_city}), reqOptions)\n        \n        if(response.status != 200) {\n            this.setState({error_alert: true});\n            return null;\n        }\n\n        response = await response.json();\n\n        const from_places = response;\n        \n        response = await fetch(`https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/${currency}/en-US/?` + new URLSearchParams({query: this.state.fly_to_city}), reqOptions)\n        \n        if(response.status != 200) {\n            this.setState({error_alert: true});\n            return null;\n        }\n\n        response = await response.json();\n\n        const to_places = response;\n\n        this.setState({error_alert: false});\n        return [from_places, to_places];\n    }\n\n    async getRoutes(currency, origin, destination, outbound_date, inbound_date) {\n        const reqOptions = {\n            method: 'GET',\n            headers: {\n                \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\n                \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n            }\n        }\n        let response = await fetch(`https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browseroutes/v1.0/US/${currency}/en-US/${origin}/${destination}/${outbound_date}/${inbound_date}`, reqOptions);\n        if(response.status != 200) {\n            this.setState({error_alert: true});\n        }\n        else {\n            response = await response.json();\n            this.props.dataCallback(response);\n        }\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        if(this.state.fly_from_city === \"\" || this.state.fly_from_country === \"\" \n            || this.state.fly_from_state === \"\" || this.state.fly_to_city === \"\"\n            || this.state.fly_to_state === \"\" || this.state.fly_to_country === \"\"\n            || this.state.currency === \"\" || this.state.early === \"\" || this.state.late === \"\") {\n                this.setState({form_alert: true});\n        }\n        else {\n            this.setState({form_alert: false});\n            // find to and from places and pass their ids into function\n            const placeIds = this.getPlaces(this.state.currency);\n\n            let self = this;\n            placeIds.then(\n                function determinePlaceIds(placeIds) {\n                    if(placeIds != null) {\n                        const to_id = placeIds[1].Places[0].PlaceId;\n                        const from_id = placeIds[0].Places[0].PlaceId;\n\n                        // search for things - call API\n                        self.getRoutes(self.state.currency, from_id, to_id, self.state.early, self.state.late);\n                    }\n                }\n            );\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = target.value;\n\n        this.setState({\n            ...this.state,\n            [name]: value, \n        });\n    }\n\n    render() {\n        let states = new Map();\n\n        states.set(\"N/A\", \"N/A\");\n        states.set(\"Alabama\", \"AL\");\n        states.set(\"Alaska\", \"AK\");\n        states.set(\"Arizona\", \"AZ\");\n        states.set(\"Arkansas\", \"AR\");\n        states.set(\"California\", \"CA\");\n        states.set(\"Colorado\", \"CO\");\n        states.set(\"Connecticut\", \"CT\");\n        states.set(\"Delaware\", \"DE\");\n        states.set(\"Florida\", \"FL\");\n        states.set(\"Georgia\", \"GA\");\n        states.set(\"Hawaii\", \"HI\");\n        states.set(\"Idaho\", \"ID\");\n        states.set(\"Illinois\", \"IL\");\n        states.set(\"Indiana\", \"IN\");\n        states.set(\"Iowa\", \"IA\");\n        states.set(\"Kansas\", \"KS\");\n        states.set(\"Kentucky\", \"KY\");\n        states.set(\"Louisiana\", \"LA\");\n        states.set(\"Maine\", \"ME\");\n        states.set(\"Maryland\", \"MD\");\n        states.set(\"Massachusetts\", \"MA\");\n        states.set(\"Michigan\", \"MI\");\n        states.set(\"Minnesota\", \"MN\");\n        states.set(\"Mississippi\", \"MS\");\n        states.set(\"Missouri\", \"MO\");\n        states.set(\"Montana\", \"MT\");\n        states.set(\"Nebraska\", \"NE\");\n        states.set(\"Nevada\", \"NV\");\n        states.set(\"New Hampshire\", \"NH\");\n        states.set(\"New Jersey\", \"NJ\");\n        states.set(\"New Mexico\", \"NM\");\n        states.set(\"New York\", \"NY\");\n        states.set(\"North Carolina\", \"NC\");\n        states.set(\"North Dakota\", \"ND\");\n        states.set(\"Ohio\", \"OH\");\n        states.set(\"Oklahoma\", \"OK\");\n        states.set(\"Oregon\", \"OR\");\n        states.set(\"Pennsylvania\", \"PA\");\n        states.set(\"Rhode Island\", \"RI\");\n        states.set(\"South Carolina\", \"SC\");\n        states.set(\"South Dakota\", \"SD\");\n        states.set(\"Tennessee\", \"TN\");\n        states.set(\"Texas\", \"TX\");\n        states.set(\"Utah\", \"UT\");\n        states.set(\"Vermont\", \"VT\");\n        states.set(\"Virginia\",\"VA\");\n        states.set(\"Washington\", \"WA\");\n        states.set(\"West Virginia\", \"WV\");\n        states.set(\"Wisconsin\", \"WI\");\n        states.set(\"Wyoming\", \"WY\");\n\n        return (\n            <div className=\"form\">\n                <div className=\"form_alert\">\n                    {this.state.form_alert ? \n                        <Alert variant=\"danger\" onClose={() => {this.setState({form_alert: false})}} dismissible>\n                            <Alert.Heading>Please fill in all fields before searching.</Alert.Heading>\n                        </Alert>\n                        : null\n                    }\n                </div>\n                <div className=\"search_error_alert\">\n                    {this.state.error_alert ? \n                        <Alert variant=\"danger\" onClose={() => {this.setState({error_alert: false})}} dismissible>\n                            <Alert.Heading>Invalid search. Please check your inputs.</Alert.Heading>\n                        </Alert>\n                        : null\n                    }\n                </div>\n                <div className=\"flightinfo\">\n                    <Form>\n                        <Form.Group>\n                            <Form.Row>\n                                <Form.Label>Flying From: </Form.Label>\n                                    <Col>\n                                        <Form.Control type=\"text\" name=\"fly_from_city\" placeholder=\"City\" onChange={this.handleChange}/>\n                                    </Col>\n                                    <Col>\n                                        <Form.Control as=\"select\" name=\"fly_from_state\" onChange={this.handleChange}>\n                                            <option value=\"\">State</option>\n                                            {Array.from(states.keys()).map(state => {\n                                                return (\n                                                    <option value={states.get(state)}>{state}</option>\n                                                )\n                                            })}\n                                        </Form.Control>\n                                    </Col>\n                                    <Col>\n                                        <Form.Control type=\"text\" name=\"fly_from_country\" placeholder=\"Country\" onChange={this.handleChange}/>\n                                    </Col>\n                            </Form.Row>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Row>\n                                <Form.Label>Currency: </Form.Label>\n                                <Col>\n                                    <Form.Control as=\"select\" name=\"currency\" onChange={this.handleChange}>\n                                        <option value=\"\">Select currency</option>\n                                        {this.props.currencies.map(currency => {\n                                            if(currency.Code !== currency.Symbol) {\n                                                return (\n                                                    <option value={currency.Code}>{`${currency.Code} (${currency.Symbol})`}</option>\n                                                )\n                                            }\n                                            else {\n                                                return (\n                                                    <option value={currency.Code}>{`${currency.Code}`}</option>\n                                                )\n                                            }\n                                        })}\n                                    </Form.Control>\n                                </Col>\n                            </Form.Row>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Row>\n                                <Form.Label>Flying To: </Form.Label>\n                                <Col>\n                                    <Form.Control type=\"text\" name=\"fly_to_city\" placeholder=\"City\" onChange={this.handleChange}/>\n                                </Col>\n                                <Col>\n                                    <Form.Control as=\"select\" name=\"fly_to_state\" onChange={this.handleChange}>\n                                        <option value=\"\">State</option>\n                                        {Array.from(states.keys()).map(state => {\n                                            return (\n                                                <option value={states.get(state)}>{state}</option>\n                                            )\n                                        })}\n                                    </Form.Control>\n                                </Col>\n                                <Col>\n                                    <Form.Control type=\"text\" name=\"fly_to_country\" placeholder=\"Country\" onChange={this.handleChange}/>\n                                </Col>\n                            </Form.Row>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Row>\n                                <Form.Label>Earliest Flight Date: </Form.Label>\n                                <Col>\n                                    <Form.Control type=\"text\" name=\"early\" placeholder=\"yyyy-mm-dd, yyyy-mm, or anytime\" \n                                        onChange={this.handleChange}/>\n                                </Col>\n                                <Form.Label>Latest Flight Date: </Form.Label>\n                                <Col>\n                                    <Form.Control type=\"text\" name=\"late\" placeholder=\"yyyy-mm-dd, yyyy-mm, or anytime\"\n                                        onChange={this.handleChange}/>\n                                </Col>\n                            </Form.Row>\n                        </Form.Group>\n                        <Button variant=\"primary\" onClick={this.handleSubmit}>Search</Button>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FlightSearchFormTwo","import { DataGrid, GridRowsProp, GridColDef } from '@material-ui/data-grid'\nimport { React, useState } from 'react'\nimport Table from 'react-bootstrap/Table'\nimport Alert from 'react-bootstrap/Alert'\n\nfunction FlightTableTwo(props) {\n\n    const columns = [\n        { field: 'date', headerName: 'Date', width: 200}, \n        { field: 'price', headerName: 'Price', width: 200},\n        { field: 'carrier', headerName: 'Carrier', width: 200},\n        { field: 'from', headerName: \"From\", width: 400}, \n        { field: 'to', headerName: \"To\", width: 400},\n        { field: 'direct', headerName: 'Direct', width: 200},\n    ];\n\n    let rows = [];\n    let carriers = new Map();\n    let places = new Map();\n    \n    if(props.ready) {\n\n        for(let i = 0; i < props.data.Carriers.length; i++) {\n            carriers.set(props.data.Carriers[i].CarrierId, props.data.Carriers[i].Name);\n        }\n\n        for(let j = 0; j < props.data.Places.length; j++) {\n            places.set(props.data.Places[j].PlaceId, props.data.Places[j].Name);\n        }\n\n        props.data.Quotes.map((quote, index) => {\n            const directString = quote.Direct ? \"Yes\" : \"No\";\n            const parsedOutboundDate = quote.OutboundLeg.DepartureDate.split('T')[0];\n            const parsedInboundDate = quote.InboundLeg.DepartureDate.split('T')[0];\n\n            rows.push(\n                {\n                    \"id\": index * 2,\n                    \"date\": parsedOutboundDate,\n                    \"price\": quote.MinPrice,\n                    \"carrier\": carriers.get(quote.OutboundLeg.CarrierIds[0]),\n                    \"from\": places.get(quote.OutboundLeg.OriginId),\n                    \"to\": places.get(quote.OutboundLeg.DestinationId),\n                    \"direct\": directString\n                }\n            );\n            \n            rows.push(\n                {\n                    \"id\": index * 2 + 1,\n                    \"date\": parsedInboundDate,\n                    \"price\": quote.MinPrice,\n                    \"carrier\": carriers.get(quote.InboundLeg.CarrierIds[0]),\n                    \"from\": places.get(quote.InboundLeg.OriginId),\n                    \"to\": places.get(quote.InboundLeg.DestinationId),\n                    \"direct\": directString\n                }\n            );\n        });\n    }\n\n    return (\n        <div>\n            <div className=\"routes_alert\">\n                {props.ready ? \n                            <Alert variant=\"success\">\n                                <Alert.Heading>\n                                    The cheapest routes are: \n                                    {\n                                        props.data.Routes.map((route, index) => {\n                                            return (\n                                                ` ${index + 1}) ${places.get(route.OriginId)} to ${places.get(route.DestinationId)}\n                                                 for ${route.Price} ${props.data.Currencies[0].Code}`\n                                            )\n                                        })\n                                    }\n                                </Alert.Heading>\n                            </Alert>\n                            : null\n                }\n            </div>\n            <div style={{ display: 'flex', height: '100%', flexGrow: 1, background: \"white\" }}>\n                <DataGrid autoHeight rows={rows} columns={columns} variant=\"dark\" pageSize={10}/>\n            </div>\n        </div>\n    );\n}\n\nexport default FlightTableTwo;","import FlightSearchFormTwo from '../../components/FlightSearchFormTwo';\nimport FlightTableTwo from '../../components/FlightTableTwo';\nimport { useState } from 'react';\nimport './index.css'\n\nconst FlightPlannerHome = () => {\n    const [currencies, setCurrencies] = useState([]);\n    const [gotCurrencies, setGotCurrencies] = useState(false);\n    const [tableData, setTableData] = useState([]);\n    const [ready, setReady] = useState(false);\n\n    if(!gotCurrencies) {\n        getCurrencies();\n    }\n\n    async function getCurrencies() {\n        const reqOptions = {\n          method: 'GET',\n          headers: {\n              \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\n              \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n          }\n        }\n    \n        let response = await fetch(\"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/reference/v1.0/currencies\", reqOptions);\n        response = await response.json();\n        \n        setCurrencies(response.Currencies);\n        setGotCurrencies(true);\n    }\n\n    const getTableData = (data) => {\n        setTableData(data);\n        setReady(true);\n    }\n    \n    return (\n        <>\n            <div className=\"welcome\">\n                <p> Welcome! To search for flights, please input the place of departure and destination. If you are not \n                    flying from/to a place in the United States, please select N/A in the \"State\" field. </p>\n                <p> Then select your currency and enter a range of dates during which you potentially wish to fly. </p>\n                <p> The results of your search (prices in the currency you selected) will appear in the \n                    table below. </p>\n                <p> Click each column of the table to sort rows based on this field. </p>\n            </div>\n            <div>\n                <FlightSearchFormTwo currencies={currencies} dataCallback={getTableData}/><br/><br/>\n                <FlightTableTwo data={tableData} ready={ready}/>\n            </div>\n        </>\n    );\n};\n\nexport default FlightPlannerHome;","import './App.css';\nimport { Container } from \"react-bootstrap\";\nimport FlightPlannerHome from './pages/FlightPlannerHome';\n\n\nfunction App() {\n\n  return (\n    <div>\n      <Container fluid className=\"App\">\n        <Container fluid>\n          <FlightPlannerHome/>\n        </Container>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}